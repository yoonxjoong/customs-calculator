# 워크플로우의 이름
name: Java CI with Gradle

# 워크플로우가 실행될 이벤트를 정의합니다.
on:
  pull_request:
    branches:
      - master
      - develop

# 여러 작업을 정의하는 섹션
jobs:
  # 'build'라는 이름의 작업
  build:
    # 이 작업이 실행될 환경 (최신 Ubuntu)
    runs-on: ubuntu-latest

    # PostgreSQL 서비스 컨테이너를 정의합니다.
    services:
      postgres_db:
        image: postgres:15.5-alpine # PostgreSQL 이미지 및 버전
        env:
          POSTGRES_DB: customs
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432 # 외부 포트(5432)를 컨테이너 포트(5432)로 포워딩
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # 1. GitHub 저장소 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. 자바(Java) 환경 설정 및 Gradle 캐시
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 3. PostgreSQL 서비스가 완전히 준비될 때까지 기다립니다.
      - name: Wait for postgres service
        run: |
          for i in $(seq 1 10); do
            nc -z localhost 5432 && echo "Postgres is up!" && break
            echo "Waiting for postgres..."
            sleep 1
          done

      # 4. Gradle Wrapper에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 5. Gradle 빌드 및 테스트
      # `build.gradle` 파일에 PostgreqSQL 드라이버가 포함되어 있어야 합니다.
      - name: Run Gradle build and tests
        run: ./gradlew build --no-daemon

      # 6. 테스트 결과 보고서 게시
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() # 빌드 실패 여부와 관계없이 항상 실행
        with:
          name: test-results
          path: build/reports/tests/test/
          retention-days: 5